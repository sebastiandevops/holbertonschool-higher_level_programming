The ``7-base_geometry`` module
============================

Using ``BaseGeometry``
---------------------
Checking docstring for module:
        >>> __import__('7-base_geometry').__doc__ != None
        True

Import ``BaseGeometry`` from the ``7-base_geometry`` module:
        >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Check docstring for function:
        >>> len(BaseGeometry.__doc__) > 0
        True

Checking the function with a string:
        >>> bg = BaseGeometry()
        >>> bg.integer_validator("string", "stri")
        Traceback (most recent call last):
                ...
        TypeError: string must be an integer

Checking the function with a float:
        >>> bg = BaseGeometry()
        >>> bg.integer_validator("float", 1.5)
        Traceback (most recent call last):
                ...
        TypeError: float must be an integer

Checking the function with an integer less than 0:
        >>> bg = BaseGeometry()
        >>> bg.integer_validator("lessThan0", -5)
        Traceback (most recent call last):
                ...
        ValueError: lessThan0 must be greater than 0

Checking the function with an integer equal to 0:
        >>> bg = BaseGeometry()
        >>> bg.integer_validator("zero", 0)
        Traceback (most recent call last):
                ...
        ValueError: zero must be greater than 0

Checking the function with an int:
        >>> bg = BaseGeometry()
        >>> bg.integer_validator("my_int", 7)
        >>>

Checking the function missing one argument:
        >>> bg = BaseGeometry()
        >>> bg.integer_validator("my_int")
        Traceback (most recent call last):
                ...
        TypeError: integer_validator() missing 1 required positional argument: 'value'

Checking the function missing two arguments:
        >>> bg = BaseGeometry()
        >>> bg.integer_validator()
        Traceback (most recent call last):
                ...
        TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

Checking the function with an object:
        >>> bg = BaseGeometry()
        >>> bg.integer_validator("my_object", object)
        Traceback (most recent call last):
                ...
        TypeError: my_object must be an integer

Checking the function with boolean:
        >>> bg = BaseGeometry()
        >>> bg.integer_validator("bool", True)
        >>>

Check the function with negative float:
        >>> bg = BaseGeometry()
        >>> bg.integer_validator("negativeFloat", -1.5)
        Traceback (most recent call last):
                ...
        TypeError: negativeFloat must be an integer

Check the function with string number:
        >>> bg = BaseGeometry()
        >>> bg.integer_validator("stri", "5")
        Traceback (most recent call last):
                ...
        TypeError: stri must be an integer

Check the function with list:
        >>> bg = BaseGeometry()
        >>> bg.integer_validator("list", [5, 5])
        Traceback (most recent call last):
                ...
        TypeError: list must be an integer

Checking the function with false boolean:
        >>> bg = BaseGeometry()
        >>> bg.integer_validator("falseBoolean", False)
        Traceback (most recent call last):
                ...
        ValueError: falseBoolean must be greater than 0
